
    public Graph gibSpannbaum(Graph pGraph) {
        List<Vertex> KnListe = pGraph.getVertices();
        List <Edge>kaListe=quickSort(pGraph.getEdges());
        KnListe.toFirst();
        Graph g = pGraph;
        while(KnListe.hasAccess()) {
            g.addVertex(KnListe.getContent());
            KnListe.next();
        }
        KnListe.toFirst();
        kaListe.toFirst();
        while(kaListe.hasAccess()) {
            g.addEdge(kaListe.getContent());
            if(zyklusSuche(g)) {
                g.removeEdge(kaListe.getContent());
                }
            kaListe.next();
        }        
        return g;
    }
    public boolean zyklusSuche(Graph pGraph) {
        pGraph.setAllVertexMarks(false);
        List<Vertex> Knoten;
        Knoten = pGraph.getVertices();
        if (markedNeighbours(Knoten.getContent(), pGraph) > 1) {
            return true;
        }
        return false;

    }

    public int markedNeighbours(Vertex pVertex, Graph pGraph) {
        int anz = 0;
        List<Vertex> Nachbaren;
        if (!pVertex.isMarked()) {
            Nachbaren = pGraph.getNeighbours(pVertex);
            Nachbaren.toFirst();
            while (!Nachbaren.isEmpty() &&Nachbaren.hasAccess() ){
                if (Nachbaren.getContent().isMarked() == true) {
                    anz = anz++;
                }
                Nachbaren.getContent().setMark(true);
                this.markedNeighbours(Nachbaren.getContent(), pGraph);
                Nachbaren.next();
            }
        }
        return anz;
    }
